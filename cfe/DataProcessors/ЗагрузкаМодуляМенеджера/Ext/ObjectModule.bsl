
&Перед("ЗагрузитьПроцедурыИФункцииВОбъектыМетаданных")
Процедура КД3_Fix_ЗагрузитьПроцедурыИФункцииВОбъектыМетаданных(ТаблицаРезультатов)
	
	Если НЕ ПКО Тогда
		Возврат;
	КонецЕсли;
	
	// Предварительное заполнение направлений для ПКО, если оно задано в ЗаполнитьПравилаКонвертацииОбъектов
	СтрокаРезультат = ТаблицаРезультатов.Найти("ЗаполнитьПравилаКонвертацииОбъектов", "ИмяПроцедурыФункции");
	Если ЗначениеЗаполнено(СтрокаРезультат) Тогда
		КД3_Fix_ЗаполнитьНаправлениеПКО(СтрокаРезультат, ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

Процедура КД3_Fix_ЗаполнитьНаправлениеПКО(СтрокаРезультат, ТаблицаРезультатов)
	
	ЧислоСтрок = СтрЧислоСтрок(СтрокаРезультат.ТекстМодуля);
	Если ЧислоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	НаправлениеОбмена = Неопределено;
	Для Сч = 1 По ЧислоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(СтрокаРезультат.ТекстМодуля, Сч);
		Если Лев(ТекСтрока, 2) = "//" Или СокрЛП(ТекСтрока) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ТекСтрока, "Если НаправлениеОбмена = ""Отправка"" Тогда") <> 0 Тогда
			НаправлениеОбмена = "Отправка";
			
		ИначеЕсли СтрНайти(ТекСтрока, "Если НаправлениеОбмена = ""Получение"" Тогда") <> 0 Тогда
			НаправлениеОбмена = "Получение";
			
		ИначеЕсли СтрНайти(ТекСтрока, "КонецЕсли;") <> 0 Тогда
			НаправлениеОбмена = Неопределено;
			
		Иначе
			
			НачПроцедуры = СтрНайти(ТекСтрока, "ДобавитьПКО_");
			Если НачПроцедуры <> 0 Тогда
				КонПроцедуры = СтрНайти(ТекСтрока, "(", , НачПроцедуры);
				ИмяПроцедуры = Сред(ТекСтрока, НачПроцедуры, КонПроцедуры - НачПроцедуры);
				СтрокаРезультатаПКО = ТаблицаРезультатов.Найти(ИмяПроцедуры, "ИмяПроцедурыФункции");
				Если ЗначениеЗаполнено(СтрокаРезультатаПКО) Тогда
					Если НаправлениеОбмена = Неопределено Тогда
						СтрокаРезультатаПКО.Отправка = Истина;
						СтрокаРезультатаПКО.Получение = Истина;
					Иначе
						СтрокаРезультатаПКО[НаправлениеОбмена] = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗагрузитьПКО")
Процедура КД3_Fix_ЗагрузитьПКО(СтрокаРезультат, Конфигурация, СчетчикПКО, СуществующиеПКО)
	ЧислоСтрок = СтрЧислоСтрок(СтрокаРезультат.ТекстМодуля);
	Если ЧислоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПКО.Ссылка КАК СсылкаПравило,
	|	Состав.Ссылка КАК СсылкаСостав,
	|	ПКО.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК Состав
	|ПО Состав.ЭлементКонвертации = ПКО.Ссылка
	|	И Состав.Владелец = &Конвертация
	|	И Состав.Отключить = ЛОЖЬ
	|ГДЕ ПКО.Код = &Имя";
	Запрос.УстановитьПараметр("Имя", СтрокаРезультат.НаименованиеОбъекта);
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Выборка = Запрос.Выполнить().Выбрать();
	ПравилоСоздано = Ложь;
	СуществующиеПКС = Новый Массив;
	СчетчикПКС = 0;
	ДанныеГруппы = Новый Структура("ТекущаяГруппаПКС, ТекущийРодительСвойства", Справочники.ПравилаКонвертацииСвойств.ПустаяСсылка(), "");

	Если Выборка.Следующий() Тогда
		ПКООбъект = Выборка.СсылкаПравило.ПолучитьОбъект();
		ПКООбъект.ИдентификацияПоПолямПоиска.Очистить();
		ИндексПКО = СуществующиеПКО.Найти(Выборка.СсылкаПравило);
		Если ИндексПКО <> Неопределено Тогда
			СуществующиеПКО.Удалить(ИндексПКО);
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда
			ПКООбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		ПКОСсылка = Выборка.СсылкаПравило;

		ЗапросПКС = Новый Запрос;
		ЗапросПКС.УстановитьПараметр("Ссылка", Выборка.СсылкаПравило);
		ЗапросПКС.Текст = "ВЫБРАТЬ Ссылка
		|ИЗ Справочник.ПравилаКонвертацииСвойств
		|ГДЕ Владелец = &Ссылка";
		СуществующиеПКС = ЗапросПКС.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		ПКООбъект = Справочники.ПравилаКонвертацииОбъектов.СоздатьЭлемент();
		ПКООбъект.ТипКонвертации = Перечисления.ТипыКонвертаций.XDTO;
		ПКООбъект.Код = СтрокаРезультат.НаименованиеОбъекта;
		ПКОСсылка = Неопределено;
		ПравилоСоздано = Истина;
	КонецЕсли;
	Для Сч = 1 По ЧислоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(СтрокаРезультат.ТекстМодуля, Сч);
		Если Лев(ТекСтрока, 2) = "//" Или СокрЛП(ТекСтрока) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ТекСтрока, ".ОбъектДанных") > 0 Тогда
			ИмяОбъектаКонфигурации = ТекстПослеРавно(ТекСтрока);
			ПКООбъект.ОбъектКонфигурации = ОбъектКонфигурацииПоСтроке(ИмяОбъектаКонфигурации, Конфигурация);
		ИначеЕсли СтрНайти(ТекСтрока, ".ОбъектФормата") > 0 Тогда
			ПКООбъект.ОбъектФормата = ТекстПослеРавно(ТекСтрока);
		ИначеЕсли СтрНайти(ТекСтрока, "ДобавитьПКС(СвойстваШапки") > 0
			Или СтрНайти(ТекСтрока, "ДобавитьПКС(СвойстваТЧ") > 0 Тогда
			Если СтрНайти(ТекСтрока, "ДобавитьПКС(СвойстваШапки") > 0 Тогда
				// Сбрасываем данные группы.
				ДанныеГруппы = Новый Структура("ТекущаяГруппаПКС, ТекущийРодительСвойства");
			КонецЕсли;
			ДобавитьПКС(ТекСтрока, Конфигурация, ПКООбъект, ПКОСсылка, СуществующиеПКС, СчетчикПКС, ДанныеГруппы);
		ИначеЕсли СтрНайти(ТекСтрока, "ДобавитьПКТЧ(") > 0 Тогда
			ДанныеГруппы = Новый Структура("ТекущаяГруппаПКС, ТекущийРодительСвойства");
			ДобавитьПКГС(ТекСтрока, Конфигурация, ПКООбъект, ПКОСсылка, СуществующиеПКС, СчетчикПКС, ДанныеГруппы);
		ИначеЕсли СтрНайти(ТекСтрока, ".ВариантИдентификации") > 0 Тогда
			ВариантИдентификацииСтрокой = ТекстПослеРавно(ТекСтрока);
			Если ВариантИдентификацииСтрокой = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска" Тогда
				ПКООбъект.ВариантИдентификации = Перечисления.ВариантыИдентификацииОбъектов.СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска;
			ИначеЕсли ВариантИдентификацииСтрокой = "ПоПолямПоиска" Тогда
				ПКООбъект.ВариантИдентификации = Перечисления.ВариантыИдентификацииОбъектов.ПоПолямПоиска;
			Иначе
				ПКООбъект.ВариантИдентификации = Перечисления.ВариантыИдентификацииОбъектов.ПоУникальномуИдентификатору;
			КонецЕсли;
		ИначеЕсли СтрНайти(ТекСтрока, ".ПоляПоиска.Добавить(") > 0 Тогда
			СтрПолеПоиска = ПКООбъект.ИдентификацияПоПолямПоиска.Добавить();
			СтрПолеПоиска.РеквизитыПоиска = ТекстВнутриКавычек(ТекСтрока);
		ИначеЕсли СтрНайти(ТекСтрока, ".ПослеЗагрузкиВсехДанных") > 0 Тогда
			ПКООбъект.АлгоритмПослеЗагрузкиВсехДанных = ТекстПослеРавно(ТекСтрока);
#Вставка
		ИначеЕсли СтрНайти(ТекСтрока, ".ПравилоДляГруппыСправочника") > 0 Тогда
			ПКООбъект.ПравилоДляГруппыСправочника = (НРег(ТекстПослеРавно(ТекСтрока)) = "истина");
#КонецВставки
		КонецЕсли;
	КонецЦикла;
	ПКООбъект.ИспользоватьДляОтправки = СтрокаРезультат.Отправка;
	ПКООбъект.ИспользоватьДляПолучения = СтрокаРезультат.Получение;
	ПКООбъект.Порядок = СчетчикПКО * 10;
	Если ЗначениеЗаполнено(СтрокаРезультат.Область) Тогда
		ПКООбъект.ГруппаПравил = СтрокаРезультат.Область;
	ИначеЕсли (СтрокаРезультат.Отправка = Ложь И СтрокаРезультат.Получение = Ложь) 
		Или (СтрокаРезультат.Отправка = Истина И СтрокаРезультат.Получение = Истина) Тогда
		ПКООбъект.ГруппаПравил = "Отправка и получение";
		ПКООбъект.ИспользоватьДляОтправки = Истина;
		ПКООбъект.ИспользоватьДляПолучения = Истина;
	ИначеЕсли СтрокаРезультат.Отправка Тогда
		ПКООбъект.ГруппаПравил = "Отправка";
	Иначе
		ПКООбъект.ГруппаПравил = "Получение";
	КонецЕсли;

	СчетчикПКО = СчетчикПКО + 1; 
	ПКООбъект.Записать();
	Если ПравилоСоздано Тогда
		Справочники.СоставыКонвертаций.ДополнитьСоставКонвертации(Конвертация, ПКООбъект.Ссылка);
	КонецЕсли;
	// Удаление ПКС.
	Для Каждого ПКС Из СуществующиеПКС Цикл
		ПКСОбъект = ПКС.ПолучитьОбъект();
		ПКСОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры
